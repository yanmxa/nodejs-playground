{"ast":null,"code":"// points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20]\n};\nconst style = {\n  0: {\n    color: \"yellow\",\n    size: 15\n  },\n  1: {\n    color: \"gold\",\n    size: 6\n  },\n  2: {\n    color: \"green\",\n    size: 10\n  },\n  3: {\n    color: \"gold\",\n    size: 6\n  },\n  4: {\n    color: \"purple\",\n    size: 6\n  },\n  5: {\n    color: \"gold\",\n    size: 29\n  },\n  6: {\n    color: \"gold\",\n    size: 15\n  },\n  7: {\n    color: \"gold\",\n    size: 15\n  },\n  8: {\n    color: \"blue\",\n    size: 15\n  },\n  9: {\n    color: \"gold\",\n    size: 15\n  },\n  11: {\n    color: \"gold\",\n    size: 15\n  },\n  12: {\n    color: \"gold\",\n    size: 15\n  },\n  13: {\n    color: \"red\",\n    size: 15\n  },\n  14: {\n    color: \"gold\",\n    size: 15\n  },\n  15: {\n    color: \"gold\",\n    size: 15\n  },\n  16: {\n    color: \"gold\",\n    size: 15\n  },\n  17: {\n    color: \"orange\",\n    size: 15\n  },\n  18: {\n    color: \"gold\",\n    size: 15\n  },\n  19: {\n    color: \"gold\",\n    size: 15\n  },\n  20: {\n    color: \"gold\",\n    size: 15\n  }\n};\nexport const drawHand = (predicitons, ctx) => {\n  if (predicitons.length > 0) {\n    predicitons.forEach(prediction => {\n      const landmarks = prediction.landmarks;\n\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n          ctx.beginPath();\n          ctx.moveTo(landmarks[firstJointIndex][0], landmarks[firstJointIndex][1]);\n          ctx.lineTo(landmarks[secondJointIndex][0], landmarks[secondJointIndex][1]);\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      for (let i = 0; i < landmarks.length; i++) {\n        const x = landmarks[i][0];\n        const y = landmarks[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 10, 0, 2 * Math.PI);\n        ctx.fillStyle = \"grey\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/yanmeng/workspace/react-playground/handpose-detection/src/utilities.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","style","color","size","drawHand","predicitons","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill"],"mappings":"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","sourcesContent":["// points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20],\n};\n\nconst style = {\n  0: { color: \"yellow\", size: 15 },\n  1: { color: \"gold\", size: 6 },\n  2: { color: \"green\", size: 10 },\n  3: { color: \"gold\", size: 6 },\n  4: { color: \"purple\", size: 6 },\n  5: { color: \"gold\", size: 29 },\n  6: { color: \"gold\", size: 15 },\n  7: { color: \"gold\", size: 15 },\n  8: { color: \"blue\", size: 15 },\n  9: { color: \"gold\", size: 15 },\n  11: { color: \"gold\", size: 15 },\n  12: { color: \"gold\", size: 15 },\n  13: { color: \"red\", size: 15 },\n  14: { color: \"gold\", size: 15 },\n  15: { color: \"gold\", size: 15 },\n  16: { color: \"gold\", size: 15 },\n  17: { color: \"orange\", size: 15 },\n  18: { color: \"gold\", size: 15 },\n  19: { color: \"gold\", size: 15 },\n  20: { color: \"gold\", size: 15 },\n};\n\nexport const drawHand = (predicitons, ctx) => {\n  if (predicitons.length > 0) {\n    predicitons.forEach((prediction) => {\n      const landmarks = prediction.landmarks;\n\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n\n          ctx.beginPath();\n          ctx.moveTo(\n            landmarks[firstJointIndex][0],\n            landmarks[firstJointIndex][1]\n          );\n          ctx.lineTo(\n            landmarks[secondJointIndex][0],\n            landmarks[secondJointIndex][1]\n          );\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      for (let i = 0; i < landmarks.length; i++) {\n        const x = landmarks[i][0];\n        const y = landmarks[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 10, 0, 2 * Math.PI);\n        ctx.fillStyle = \"grey\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}