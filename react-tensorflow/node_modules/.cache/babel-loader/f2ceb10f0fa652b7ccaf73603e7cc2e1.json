{"ast":null,"code":"// Triangulation metrics\nexport const TRIANGULATION = []; // Draw triangle\n\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n\n  ctx.strokeStyle = \"pink\";\n  ctx.stroke(region);\n}; // Draw the points\n\n\nexport const drawMesh = (preditions, ctx) => {\n  if (preditions.length > 0) {\n    // Draw triangles\n    for (let i = 0; i < TRIANGULATION.length / 3; i++) {\n      const points = [TRIANGULATION[i * 3], TRIANGULATION[i * 3 + 1], TRIANGULATION[i * 3 + 2]].map(index => keypoints[index]);\n    } // Draw Points\n\n\n    preditions.forEach(predition => {\n      const keypoints = predition.scaledMesh;\n\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 1, 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/yanmeng/workspace/react/react-tensorflow/src/utilities.js"],"names":["TRIANGULATION","drawPath","ctx","points","closePath","region","Path2D","moveTo","i","length","point","lineTo","strokeStyle","stroke","drawMesh","preditions","map","index","keypoints","forEach","predition","scaledMesh","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,EAAtB,C,CAEP;;AACA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,SAAd,KAA4B;AAC3C,QAAMC,MAAM,GAAG,IAAIC,MAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,MAAP,CAAcJ,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAd,EAA4BA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA5B;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAME,KAAK,GAAGP,MAAM,CAACK,CAAD,CAApB;AACAH,IAAAA,MAAM,CAACM,MAAP,CAAcD,KAAK,CAAC,CAAD,CAAnB,EAAwBA,KAAK,CAAC,CAAD,CAA7B;AACD;;AACD,MAAIN,SAAJ,EAAe;AACbC,IAAAA,MAAM,CAACD,SAAP;AACD;;AACDF,EAAAA,GAAG,CAACU,WAAJ,GAAkB,MAAlB;AACAV,EAAAA,GAAG,CAACW,MAAJ,CAAWR,MAAX;AACD,CAZD,C,CAcA;;;AACA,OAAO,MAAMS,QAAQ,GAAG,CAACC,UAAD,EAAab,GAAb,KAAqB;AAC3C,MAAIa,UAAU,CAACN,MAAX,GAAoB,CAAxB,EAA2B;AACzB;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,aAAa,CAACS,MAAd,GAAuB,CAA3C,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,YAAML,MAAM,GAAG,CACbH,aAAa,CAACQ,CAAC,GAAG,CAAL,CADA,EAEbR,aAAa,CAACQ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAFA,EAGbR,aAAa,CAACQ,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAHA,EAIbQ,GAJa,CAIRC,KAAD,IAAWC,SAAS,CAACD,KAAD,CAJX,CAAf;AAKD,KARwB,CAUzB;;;AACAF,IAAAA,UAAU,CAACI,OAAX,CAAoBC,SAAD,IAAe;AAChC,YAAMF,SAAS,GAAGE,SAAS,CAACC,UAA5B;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,SAAS,CAACT,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,cAAMc,CAAC,GAAGJ,SAAS,CAACV,CAAD,CAAT,CAAa,CAAb,CAAV;AACA,cAAMe,CAAC,GAAGL,SAAS,CAACV,CAAD,CAAT,CAAa,CAAb,CAAV;AACAN,QAAAA,GAAG,CAACsB,SAAJ;AACAtB,QAAAA,GAAG,CAACuB,GAAJ,CAAQH,CAAR,EAAWC,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,IAAIG,IAAI,CAACC,EAA7B;AACAzB,QAAAA,GAAG,CAAC0B,SAAJ,GAAgB,MAAhB;AACA1B,QAAAA,GAAG,CAAC2B,IAAJ;AACD;AACF,KAVD;AAWD;AACF,CAxBM","sourcesContent":["// Triangulation metrics\nexport const TRIANGULATION = [];\n\n// Draw triangle\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n  if (closePath) {\n    region.closePath();\n  }\n  ctx.strokeStyle = \"pink\";\n  ctx.stroke(region);\n};\n\n// Draw the points\nexport const drawMesh = (preditions, ctx) => {\n  if (preditions.length > 0) {\n    // Draw triangles\n    for (let i = 0; i < TRIANGULATION.length / 3; i++) {\n      const points = [\n        TRIANGULATION[i * 3],\n        TRIANGULATION[i * 3 + 1],\n        TRIANGULATION[i * 3 + 2],\n      ].map((index) => keypoints[index])\n    }\n\n    // Draw Points\n    preditions.forEach((predition) => {\n      const keypoints = predition.scaledMesh;\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 1, 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}